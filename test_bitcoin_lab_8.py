import unittest 
from unittest import TestCase
from unittest.mock import patch 
import bitcoin_lab_8 

class TestBitCoin(TestCase):

    @patch('bitcoin_lab_8.bitcoin_api_call')#apparently its this one according to the example solution?
    def test_convert_number_(self, mock_bitcoin_api_call):
        mock_bitcoin_api_call = {'bpi': {'EUR': {'code': 'EUR',
                 'description': 'Euro',
                 'rate': '815.8994',
                 'rate_float': 815.8994,
                 'symbol': '&euro;'},
         'GBP': {'code': 'GBP',
                 'description': 'British Pound Sterling',
                 'rate': '677.4879',
                 'rate_float': 677.4879,
                 'symbol': '&pound;'},
         'USD': {'code': 'USD',
                 'description': 'United States Dollar',
                 'rate': '728.4816',
                 'rate_float': 728.4816,
                 'symbol': '&#36;'}},
 'chartName': 'Bitcoin',
 'disclaimer': 'This data was generated by creating random numbers and mimics '
               'the Coinbase API JSON response structure. It is NOT real data. '
               'DO NOT USE THIS TO TRADE CRYPTOCURRENCY!',
 'time': {'updatedISO': '2023-02-14T20:16:14.370072'}}
        total_usd_calculation = 2913.9264#what the total expected by the test/?
        usd = bitcoin_lab_8.bitcoins_usd_conversion(4, 728.4816)#I don't think I did this right, this was based on the example solution, but here, the api serves no purpose?
        self.assertEqual(total_usd_calculation, usd)#I think I stuctured my code wrong, because the example definitely crashes without the api







if __name__ == '__main__':
    unittest.main()